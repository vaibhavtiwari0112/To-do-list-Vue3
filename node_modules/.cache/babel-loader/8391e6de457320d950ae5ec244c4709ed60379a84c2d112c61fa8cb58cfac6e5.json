{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted, inject } from \"vue\";\nexport default {\n  name: \"TodoList\",\n  setup() {\n    const newTask = ref(\"\");\n    const tasks = ref([]);\n    const completedTasks = ref([]); // Add completedTasks ref\n    const $axios = inject(\"$axios\");\n    const addTask = async () => {\n      if (newTask.value.trim() !== \"\") {\n        const response = await $axios.post(\"http://localhost:3000/tasks\", {\n          text: newTask.value,\n          createdAt: new Date().toLocaleString(),\n          completed: false,\n          completedAt: null\n        });\n        tasks.value.push(response.data);\n        newTask.value = \"\";\n      }\n    };\n    const completeTask = async taskId => {\n      const taskIndex = tasks.value.findIndex(task => task.id === taskId);\n      if (taskIndex !== -1) {\n        const response = await $axios.patch(`http://localhost:3000/tasks/${taskId}`, {\n          completed: true,\n          completedAt: new Date().toLocaleString()\n        });\n        tasks.value[taskIndex] = response.data;\n        completedTasks.value.push(response.data); // Add completed task to completedTasks\n      }\n    };\n\n    // Fetch tasks on component mount\n    onMounted(async () => {\n      const response = await $axios.get(\"http://localhost:3000/tasks\");\n      tasks.value = response.data;\n      completedTasks.value = response.data.filter(task => task.completed);\n    });\n    return {\n      newTask,\n      tasks,\n      addTask,\n      completeTask,\n      completedTasks\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","inject","name","setup","newTask","tasks","completedTasks","$axios","addTask","value","trim","response","post","text","createdAt","Date","toLocaleString","completed","completedAt","push","data","completeTask","taskId","taskIndex","findIndex","task","id","patch","get","filter"],"sources":["D:\\to-do-list\\client\\vue-todo-app\\src\\components\\Todo.vue"],"sourcesContent":["<!-- src/components/Todo.vue -->\r\n\r\n<template>\r\n  <div>\r\n    <h2>To-Do List</h2>\r\n    <div>\r\n      <input\r\n        v-model=\"newTask\"\r\n        @keyup.enter=\"addTask\"\r\n        placeholder=\"Add a new task\"\r\n      />\r\n    </div>\r\n    <ul>\r\n      <li v-for=\"task in tasks\" :key=\"task.id\">\r\n        <span>{{ task.text }}</span>\r\n        <span>Created on: {{ task.createdAt }}</span>\r\n        <button @click=\"completeTask(task.id)\">Complete</button>\r\n      </li>\r\n    </ul>\r\n    <h3>Completed Tasks</h3>\r\n    <ul>\r\n      <li v-for=\"task in completedTasks\" :key=\"task.id\">\r\n        <span>{{ task.text }}</span>\r\n        <span>Completed on: {{ task.completedAt }}</span>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, inject } from \"vue\";\r\n\r\nexport default {\r\n  name: \"TodoList\",\r\n  setup() {\r\n    const newTask = ref(\"\");\r\n    const tasks = ref([]);\r\n    const completedTasks = ref([]); // Add completedTasks ref\r\n    const $axios = inject(\"$axios\");\r\n\r\n    const addTask = async () => {\r\n      if (newTask.value.trim() !== \"\") {\r\n        const response = await $axios.post(\"http://localhost:3000/tasks\", {\r\n          text: newTask.value,\r\n          createdAt: new Date().toLocaleString(),\r\n          completed: false,\r\n          completedAt: null,\r\n        });\r\n        tasks.value.push(response.data);\r\n        newTask.value = \"\";\r\n      }\r\n    };\r\n\r\n    const completeTask = async (taskId) => {\r\n      const taskIndex = tasks.value.findIndex((task) => task.id === taskId);\r\n      if (taskIndex !== -1) {\r\n        const response = await $axios.patch(\r\n          `http://localhost:3000/tasks/${taskId}`,\r\n          {\r\n            completed: true,\r\n            completedAt: new Date().toLocaleString(),\r\n          }\r\n        );\r\n        tasks.value[taskIndex] = response.data;\r\n        completedTasks.value.push(response.data); // Add completed task to completedTasks\r\n      }\r\n    };\r\n\r\n    // Fetch tasks on component mount\r\n    onMounted(async () => {\r\n      const response = await $axios.get(\"http://localhost:3000/tasks\");\r\n      tasks.value = response.data;\r\n      completedTasks.value = response.data.filter((task) => task.completed);\r\n    });\r\n\r\n    return {\r\n      newTask,\r\n      tasks,\r\n      addTask,\r\n      completeTask,\r\n      completedTasks,\r\n    };\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";AA8BA,SAASA,GAAG,EAAEC,SAAS,EAAEC,MAAK,QAAS,KAAK;AAE5C,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,KAAKA,CAAA,EAAG;IACN,MAAMC,OAAM,GAAIL,GAAG,CAAC,EAAE,CAAC;IACvB,MAAMM,KAAI,GAAIN,GAAG,CAAC,EAAE,CAAC;IACrB,MAAMO,cAAa,GAAIP,GAAG,CAAC,EAAE,CAAC,EAAE;IAChC,MAAMQ,MAAK,GAAIN,MAAM,CAAC,QAAQ,CAAC;IAE/B,MAAMO,OAAM,GAAI,MAAAA,CAAA,KAAY;MAC1B,IAAIJ,OAAO,CAACK,KAAK,CAACC,IAAI,CAAC,MAAM,EAAE,EAAE;QAC/B,MAAMC,QAAO,GAAI,MAAMJ,MAAM,CAACK,IAAI,CAAC,6BAA6B,EAAE;UAChEC,IAAI,EAAET,OAAO,CAACK,KAAK;UACnBK,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,cAAc,CAAC,CAAC;UACtCC,SAAS,EAAE,KAAK;UAChBC,WAAW,EAAE;QACf,CAAC,CAAC;QACFb,KAAK,CAACI,KAAK,CAACU,IAAI,CAACR,QAAQ,CAACS,IAAI,CAAC;QAC/BhB,OAAO,CAACK,KAAI,GAAI,EAAE;MACpB;IACF,CAAC;IAED,MAAMY,YAAW,GAAI,MAAOC,MAAM,IAAK;MACrC,MAAMC,SAAQ,GAAIlB,KAAK,CAACI,KAAK,CAACe,SAAS,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAC,KAAMJ,MAAM,CAAC;MACrE,IAAIC,SAAQ,KAAM,CAAC,CAAC,EAAE;QACpB,MAAMZ,QAAO,GAAI,MAAMJ,MAAM,CAACoB,KAAK,CAChC,+BAA8BL,MAAO,EAAC,EACvC;UACEL,SAAS,EAAE,IAAI;UACfC,WAAW,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACC,cAAc,CAAC;QACzC,CACF,CAAC;QACDX,KAAK,CAACI,KAAK,CAACc,SAAS,IAAIZ,QAAQ,CAACS,IAAI;QACtCd,cAAc,CAACG,KAAK,CAACU,IAAI,CAACR,QAAQ,CAACS,IAAI,CAAC,EAAE;MAC5C;IACF,CAAC;;IAED;IACApB,SAAS,CAAC,YAAY;MACpB,MAAMW,QAAO,GAAI,MAAMJ,MAAM,CAACqB,GAAG,CAAC,6BAA6B,CAAC;MAChEvB,KAAK,CAACI,KAAI,GAAIE,QAAQ,CAACS,IAAI;MAC3Bd,cAAc,CAACG,KAAI,GAAIE,QAAQ,CAACS,IAAI,CAACS,MAAM,CAAEJ,IAAI,IAAKA,IAAI,CAACR,SAAS,CAAC;IACvE,CAAC,CAAC;IAEF,OAAO;MACLb,OAAO;MACPC,KAAK;MACLG,OAAO;MACPa,YAAY;MACZf;IACF,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}