{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted, inject } from \"vue\";\nexport default {\n  name: \"TodoList\",\n  setup() {\n    const newTask = ref(\"\");\n    const tasks = ref([]);\n    const completedTasks = ref([]);\n    const ongoingTasks = ref([]);\n    const $axios = inject(\"$axios\");\n    const activeTab = ref(1);\n    const addTask = async () => {\n      if (newTask.value.trim() !== \"\") {\n        const response = await $axios.post(\"http://localhost:3000/tasks\", {\n          text: newTask.value,\n          createdAt: new Date().toLocaleString(),\n          completed: false,\n          completedAt: null\n        });\n        tasks.value.push(response.data);\n        ongoingTasks.value.push(response.data);\n        newTask.value = \"\";\n      }\n    };\n    const deleteTask = async taskId => {\n      try {\n        await $axios.delete(`http://localhost:3000/tasks/${taskId}`);\n        tasks.value = tasks.value.filter(task => task.id !== taskId);\n        completedTasks.value = completedTasks.value.filter(task => task.id !== taskId);\n        ongoingTasks.value = ongoingTasks.value.filter(task => task.id !== taskId);\n      } catch (error) {\n        console.error(\"Error deleting task:\", error);\n      }\n    };\n    const completeTask = async taskId => {\n      const taskIndex = tasks.value.findIndex(task => task.id === taskId);\n      if (taskIndex !== -1) {\n        const response = await $axios.patch(`http://localhost:3000/tasks/${taskId}`, {\n          completed: true,\n          completedAt: new Date().toLocaleString()\n        });\n        completedTasks.value.push(response.data);\n        ongoingTasks.value.splice(taskIndex, 1);\n        tasks.value.splice(taskIndex, 1);\n      }\n    };\n    onMounted(async () => {\n      const response = await $axios.get(\"http://localhost:3000/tasks\");\n      tasks.value = response.data;\n      completedTasks.value = response.data.filter(task => task.completed);\n      ongoingTasks.value = response.data.filter(task => !task.completed);\n    });\n    return {\n      newTask,\n      tasks,\n      completedTasks,\n      ongoingTasks,\n      addTask,\n      completeTask,\n      deleteTask,\n      activeTab\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","inject","name","setup","newTask","tasks","completedTasks","ongoingTasks","$axios","activeTab","addTask","value","trim","response","post","text","createdAt","Date","toLocaleString","completed","completedAt","push","data","deleteTask","taskId","delete","filter","task","id","error","console","completeTask","taskIndex","findIndex","patch","splice","get"],"sources":["D:\\to-do-list\\client\\vue-todo-app\\src\\components\\Todo.vue"],"sourcesContent":["<template>\r\n  <v-container class=\"mt-5\">\r\n    <v-row justify=\"center\">\r\n      <v-col cols=\"12\" md=\"8\">\r\n        <v-tabs v-model=\"activeTab\">\r\n          <v-tab :key=\"1\" @click=\"activeTab = 1\">Ongoing Tasks</v-tab>\r\n          <v-tab :key=\"2\" @click=\"activeTab = 2\">Completed Tasks</v-tab>\r\n        </v-tabs>\r\n        <v-tab-item :key=\"1\">\r\n          <h2>Ongoing Tasks</h2>\r\n          <v-list>\r\n            <v-list-item-group v-if=\"ongoingTasks.length > 0\">\r\n              <v-list-item v-for=\"task in ongoingTasks\" :key=\"task.id\">\r\n                <v-list-item-content>\r\n                  <v-list-item-title>{{ task.text }}</v-list-item-title>\r\n                  <v-list-item-subtitle\r\n                    >Created on: {{ task.createdAt }}</v-list-item-subtitle\r\n                  >\r\n                </v-list-item-content>\r\n                <v-list-item-action>\r\n                  <v-btn icon @click=\"completeTask(task.id)\">\r\n                    <v-icon>mdi-check</v-icon>\r\n                  </v-btn>\r\n                  <v-btn icon @click=\"deleteTask(task.id)\">\r\n                    <v-icon>mdi-delete</v-icon>\r\n                  </v-btn>\r\n                </v-list-item-action>\r\n              </v-list-item>\r\n            </v-list-item-group>\r\n            <v-alert v-else>No ongoing tasks</v-alert>\r\n          </v-list>\r\n        </v-tab-item>\r\n        <v-tab-item :key=\"2\">\r\n          <h2>Completed Tasks</h2>\r\n          <v-list>\r\n            <v-list-item-group v-if=\"completedTasks.length > 0\">\r\n              <v-list-item v-for=\"task in completedTasks\" :key=\"task.id\">\r\n                <v-list-item-content>\r\n                  <v-list-item-title>{{ task.text }}</v-list-item-title>\r\n                  <v-list-item-subtitle\r\n                    >Completed on: {{ task.completedAt }}</v-list-item-subtitle\r\n                  >\r\n                </v-list-item-content>\r\n                <v-list-item-action>\r\n                  <v-btn icon @click=\"deleteTask(task.id)\">\r\n                    <v-icon>mdi-delete</v-icon>\r\n                  </v-btn>\r\n                </v-list-item-action>\r\n              </v-list-item>\r\n            </v-list-item-group>\r\n            <v-alert v-else>No completed tasks</v-alert>\r\n          </v-list>\r\n        </v-tab-item>\r\n      </v-col>\r\n    </v-row>\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, inject } from \"vue\";\r\n\r\nexport default {\r\n  name: \"TodoList\",\r\n  setup() {\r\n    const newTask = ref(\"\");\r\n    const tasks = ref([]);\r\n    const completedTasks = ref([]);\r\n    const ongoingTasks = ref([]);\r\n    const $axios = inject(\"$axios\");\r\n    const activeTab = ref(1);\r\n\r\n    const addTask = async () => {\r\n      if (newTask.value.trim() !== \"\") {\r\n        const response = await $axios.post(\"http://localhost:3000/tasks\", {\r\n          text: newTask.value,\r\n          createdAt: new Date().toLocaleString(),\r\n          completed: false,\r\n          completedAt: null,\r\n        });\r\n        tasks.value.push(response.data);\r\n        ongoingTasks.value.push(response.data);\r\n        newTask.value = \"\";\r\n      }\r\n    };\r\n\r\n    const deleteTask = async (taskId) => {\r\n      try {\r\n        await $axios.delete(`http://localhost:3000/tasks/${taskId}`);\r\n\r\n        tasks.value = tasks.value.filter((task) => task.id !== taskId);\r\n        completedTasks.value = completedTasks.value.filter(\r\n          (task) => task.id !== taskId\r\n        );\r\n        ongoingTasks.value = ongoingTasks.value.filter(\r\n          (task) => task.id !== taskId\r\n        );\r\n      } catch (error) {\r\n        console.error(\"Error deleting task:\", error);\r\n      }\r\n    };\r\n\r\n    const completeTask = async (taskId) => {\r\n      const taskIndex = tasks.value.findIndex((task) => task.id === taskId);\r\n      if (taskIndex !== -1) {\r\n        const response = await $axios.patch(\r\n          `http://localhost:3000/tasks/${taskId}`,\r\n          {\r\n            completed: true,\r\n            completedAt: new Date().toLocaleString(),\r\n          }\r\n        );\r\n        completedTasks.value.push(response.data);\r\n        ongoingTasks.value.splice(taskIndex, 1);\r\n        tasks.value.splice(taskIndex, 1);\r\n      }\r\n    };\r\n\r\n    onMounted(async () => {\r\n      const response = await $axios.get(\"http://localhost:3000/tasks\");\r\n      tasks.value = response.data;\r\n      completedTasks.value = response.data.filter((task) => task.completed);\r\n      ongoingTasks.value = response.data.filter((task) => !task.completed);\r\n    });\r\n\r\n    return {\r\n      newTask,\r\n      tasks,\r\n      completedTasks,\r\n      ongoingTasks,\r\n      addTask,\r\n      completeTask,\r\n      deleteTask,\r\n      activeTab,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add any custom styling here */\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}